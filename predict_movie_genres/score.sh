#!/usr/bin/env bash
set -e

# Please do not edit this file!

# Utility functions -----------------------------------------------------------

function log {
    local PURPLE='\033[0;35m'
    local NOCOLOR='\033[m'
    local BOLD='\033[1m'
    local NOBOLD='\033[0m'
    echo -e -n "${PURPLE}${BOLD}$1${NOBOLD}${NOCOLOR}"
}

function normalize_score {
    python -c "import math; print(math.exp($1 * $2 / $3 + $4))"
}

function calculate_connectedness_score {
    python - "$1" << END
import json
import numpy as np
import sys

graph = json.loads(''.join(sys.argv[1]))
modules = list(graph.keys())
num_modules = len(graph)
matrix = np.ones((num_modules, num_modules))
for i, module in enumerate(modules):
    if 'imports' not in graph[module]:
        continue
    for imported_module in graph[module]['imports']:
        j = modules.index(imported_module)
        matrix[i][j] = 0
print(np.mean(matrix))
END
}

function geometric_mean {
    python - "$@" << END
import sys
import numpy as np

numbers = list(map(float, sys.argv[1:]))
numbers = np.array(numbers)
print(numbers.prod() ** (1 / len(numbers)))
END
}

function times_100 {
    python -c "print(100 * $1)"
}

function print_box {
    python - "$1" << END
import sys

lines = sys.argv[1].split('\n')
max_len = max(len(line) for line in lines)
lines = [f'║ {line.ljust(max_len)} ║' for line in lines]
lines = ['╔' + '═' * (max_len + 2) + '╗'] + lines + ['╚' + '═' * (max_len + 2) + '╝']
print('\n'.join(lines))
END
}

# Scoring steps ---------------------------------------------------------------

function create_conda_environment {
    log "Creating the Conda environment if it doesn't exist... "
    conda env create > /dev/null 2>&1 || true
    log "Done!\\n"
}

function activate_conda_environment {
    local CHALLENGE_ENV=challenge-env
    log "Activating the Conda environment... "
    if [[ $CONDA_DEFAULT_ENV != "$CHALLENGE_ENV" ]]
    then
        # shellcheck disable=SC1091
        source activate $CHALLENGE_ENV
    fi
    log "Done!\\n"
}

function set_kaggle_credentials {
    if [[ "$CI_SERVER_NAME" == "GitLab" ]]
    then
        if [[ -z $KAGGLE_USERNAME ]] || [[ -z $KAGGLE_KEY ]]
        then
            log "Please set KAGGLE_USERNAME and KAGGLE_KEY in Settings > CI / CD > Variables to continue!\\n"
            exit 1
        fi
    else
        if [[ ! -f "$HOME/.kaggle/kaggle.json" ]]
        then
            if [[ ! -f "./kaggle.json" ]]
            then
                log "Please download kaggle.json and place it in this directory to continue!\\n"
                exit 1
            else
                export KAGGLE_CONFIG_DIR=.
            fi
        else
            export KAGGLE_CONFIG_DIR=$HOME/.kaggle
        fi
        chmod 600 "$KAGGLE_CONFIG_DIR"/kaggle.json
    fi
}

function get_kaggle_score {
    log "Getting the Kaggle score... "
    KAGGLE_SCORE=$(kaggle competitions submissions --competition radixai-challenge | awk "/^submission\.csv/" | awk '$6 == "complete"' | awk 'NR==1{print $7}')
    log "Done!\\n"
}

function compute_code_quality_score {
    log "Computing the code quality score... "
    FLAKE8_ERRORS=$(flake8 | wc -l)
    PYDOC_ERRORS=$(($(pydocstyle | wc -l) / 2))
    MYPY_ERRORS=$(mypy challenge | wc -l)
    SLOC=$(pygount --suffix py | awk '{sum += $1} END {print sum}')
    PYDEPS_GRAPH=$(pydeps --show-deps --nodot --noshow --max-bacon 2 challenge)
    FLAKE8_SCORE=$(normalize_score "$FLAKE8_ERRORS" -8 "$SLOC" 0)  # exp(-8 * X / SLOC + 0)
    PYDOC_SCORE=$(normalize_score "$PYDOC_ERRORS" -8 "$SLOC" 0)  # exp(-8 * X / SLOC + 0)
    MYPY_SCORE=$(normalize_score "$MYPY_ERRORS" -8 "$SLOC" 0)  # exp(-8 * X / SLOC + 0)
    SLOC_SCORE=$(normalize_score "$SLOC" -1 800 0.125)  # exp(-1 * X / 800 + 0.125)
    CONNECTEDNESS_SCORE=$(calculate_connectedness_score "$PYDEPS_GRAPH")
    CODE_QUALITY_SCORE=$(geometric_mean "$FLAKE8_SCORE" "$PYDOC_SCORE" "$MYPY_SCORE" "$SLOC_SCORE" "$CONNECTEDNESS_SCORE")
    FINAL_SCORE=$(geometric_mean "$CODE_QUALITY_SCORE" "$KAGGLE_SCORE")
    log "Done!\\n"
}

function print_final_score {
    SCORE=$(printf "Final score                  %6.2f%% ($GITLAB_USER_EMAIL)" "$(times_100 "$FINAL_SCORE")")
    SCORE+=$(printf "\\n┣━━ Kaggle score             %6.2f%%" "$(times_100 "$KAGGLE_SCORE")")
    SCORE+=$(printf "\\n┗━━ Code quality score       %6.2f%%" "$(times_100 "$CODE_QUALITY_SCORE")")
    SCORE+=$(printf "\\n    ┣━━ Flake8 score         %6.2f%% (%d flake8 errors)" "$(times_100 "$FLAKE8_SCORE")" "$FLAKE8_ERRORS")
    SCORE+=$(printf "\\n    ┣━━ Pydocstyle score     %6.2f%% (%d pydocstyle errors)" "$(times_100 "$PYDOC_SCORE")" "$PYDOC_ERRORS")
    SCORE+=$(printf "\\n    ┣━━ Mypy score           %6.2f%% (%d mypy errors)" "$(times_100 "$MYPY_SCORE")" "$MYPY_ERRORS")
    SCORE+=$(printf "\\n    ┣━━ Source lines of code %6.2f%% (%d SLOC)" "$(times_100 "$SLOC_SCORE")" "$SLOC")
    SCORE+=$(printf "\\n    ┗━━ Dependencies score   %6.2f%% (connectedness of your dependency graph)" "$(times_100 "$CONNECTEDNESS_SCORE")")
    print_box "$SCORE"
    if [[ "$CI_SERVER_NAME" == "GitLab" ]]
    then
        curl \
            --silent \
            --request POST \
            --header 'Content-type: application/json' \
            --data "{\"text\": \"\`\`\`$SCORE\`\`\`\"}" \
            https://hooks.slack.com/services/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 > /dev/null
    fi
}

create_conda_environment
activate_conda_environment
set_kaggle_credentials
get_kaggle_score
compute_code_quality_score
print_final_score
