# baseURI: http://w3c.github.io/bigiot/offeringRecipeRuntimeConfigurationModel
# imports: http://w3c.github.io/bigiot/offeringRecipeModel
# imports: http://w3c.github.io/wot/w3c-wot-td-ontology.owl
# prefix: rrc

@prefix schema: <http://schema.org/> .
@prefix ssn:   <https://www.w3.org/2005/Incubator/ssn/ssnx/ssn#> .
@prefix bigiot: <http://big-iot.eu/core#> .
@prefix rrc: <http://w3c.github.io/bigiot/offeringRecipeRuntimeConfigurationModel#> .
@prefix offeringRecipe: <http://w3c.github.io/bigiot/offeringRecipeModel#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


<http://w3c.github.io/bigiot/offeringRecipeRuntimeConfigurationModel>
  rdf:type owl:Ontology ;
  owl:imports <http://w3c.github.io/bigiot/RecipePatternModel> ;
  owl:imports <http://w3c.github.io/wot/w3c-wot-td-ontology.owl#> ;
  owl:versionInfo "Created with..." ;
.


rrc:RecipeRuntimeConfiguration
  rdf:type owl:Class ;
  rrc:runtimeConfigurationOfRecipe offeringRecipe:Recipe ;	#One
  rrc:hasIngredientRuntimeConfiguration rrc:IngredientRuntimeConfiguration ;	#Many
  rdfs:subClassOf owl:Thing ;
.

rrc:runtimeConfigurationOfRecipe
  rdf:type owl:ObjectProperty ;
  rdfs:domain rrc:RecipeRuntimeConfiguration ;
  rdfs:range offeringRecipe:Recipe ;
.

rrc:IngredientRuntimeConfiguration
  rdf:type owl:Class ;
  rdfs:subClassOf owl:Thing ;
  rrc:hasOfferingCategory bigiot:OfferingCategory;	#One
  rrc:hasOfferingInstance bigiot:Offering ;	#Many
  rrc:presentCardinality xsd:nonNegativeInteger;
  rrc:hasOSR rrc:OSR ;	#Many
  rrc:OSRQueryString schema:Text ;
#  rrc:minCardinality xsd:nonNegativeInteger; -- OSR
#  rrc:maxCardinality xsd:nonNegativeInteger; -- OSR
.

rrc:hasOfferingInstance
  rdf:type owl:ObjectProperty ;
  rdfs:domain rrc:IngredientRuntimeConfiguration ;
  rdfs:range bigiot:Offering ;
.


rrc:hasOSR
  rdf:type owl:ObjectProperty ;
  rdfs:domain rrc:IngredientRuntimeConfiguration ;
  rdfs:range rrc:OSR ;
.

rrc:hasOfferingCategory
  rdf:type owl:ObjectProperty ;
  rdfs:domain rrc:IngredientRuntimeConfiguration ;
  rdfs:range bigiot:OfferingCategory ;
.


rrc:OSR
  rdf:type owl:Class ;
  rdfs:subClassOf owl:Thing ;
  schema:name schema:name ;
  schema:value schema:value ;
  rdfs:label "OSR" ;
  rrc:OSRCategory schema:Text ;	# DirectOSR, OperatorOSR, ComplexOSR
#  rrc:appliedTo bigiot:Offering ;	#1
#  rrc:OSRForOfferingCategory bigiot:Offering ;	#1
#  rrc:OSRList rrc:cardinality, rrc:location, rrc:place, rrc:spatialCoverage,rrc:priceLE ;
.

# OfferingInstance e.g. 'Light' will look like this -->
# rrc:OfferingInstance
#   rdf:type owl:Class ;
#   rdfs:subClassOf owl:Thing ;   
#   rrc:cardinality xsd:nonNegativeInteger ;
#   rrc:location schema:Text ;
#   rrc:place schema:Place ;
#   rrc:spatialCoverage schema:Place ;
#   rrc:priceLE schema:price ;  
# .

rrc:OSRForOfferingCategory
  rdf:type owl:ObjectProperty ;
  rdfs:domain rrc:OSR ;
  rdfs:range bigiot:Offering ;		
.

rrc:appliedTo
  rdf:type owl:ObjectProperty ;
  rdfs:domain rrc:OSR ;
  rdfs:range bigiot:Offering ;		
.

# OSRs - Offering Selection Rules  >>

rrc:DirectOSR
	rdfs:subClassOf rrc:OSR ;
	schema:name	schema:name ;
	rdfs:label	"DirectOSR" ;
    schema:domainIncludes bigiot:Offering ;
    schema:rangeIncludes schema:Text ;
    rdfs:comment "DirectOSR: OSR of type 'is' or 'equals'." 
.

# Direct OSRs ->

rrc:Location
	rdfs:subClassOf rrc:DirectOSR ;
	schema:name	"Location" ;
    rdfs:label "Location" ;
    rrc:OSRCategory "DirectOSR" ;
    schema:domainIncludes bigiot:Offering ;
    schema:rangeIncludes ssn:hasLocation;
    rrc:OSRValueType "ssn:hasLocation" ;
    rdfs:comment "Select the new offering instance if it is present at a particular location." 
.

rrc:Place
	rdfs:subClassOf rrc:DirectOSR ;
	schema:name	"Place" ;
    rdfs:label "Place" ;
    rrc:OSRCategory "DirectOSR" ;
    schema:domainIncludes bigiot:Offering ;
    schema:rangeIncludes schema:Place ;
    rrc:OSRValueType "schema:Place" ;
    rdfs:comment "Select the new offering instance if it is present at a particular place." 
.

rrc:SpatialCoverage
	rdfs:subClassOf rrc:DirectOSR ;
	schema:name	"SpatialCoverage" ;
    rdfs:label "Spatial Coverage" ;
    rrc:OSRCategory "DirectOSR" ;
    schema:domainIncludes bigiot:Offering ;
    schema:rangeIncludes schema:Place ;
    rrc:OSRValueType "schema:spatialCoverage" ;
    rdfs:comment "Select the new offering instance if it has a particular spatial coverage." 
.
######

rrc:OperatorOSR
	rdfs:subClassOf rrc:OSR ;
	schema:name	schema:name ;
	rdfs:label	"OperatorOSR" ;
    schema:domainIncludes bigiot:Offering ;
    schema:rangeIncludes xsd:double ;
    rrc:operator schema:Text ;
    rdfs:comment "OperatorOSR: OSR that defines its own operator (e.g. <, >, <=, >=, !=) to guide the selection of offerings." 
.

rrc:operator
	rdf:type owl:ObjectProperty ;
  	rdfs:domain rrc:OperatorOSR ;
  	rdfs:range schema:Text ;
.	

# Operator OSRs ->

rrc:Price
	rdfs:subClassOf rrc:OperatorOSR ;
	schema:name	"Price" ;
    rdfs:label "Price" ;
    rrc:OSRCategory "OperatorOSR" ;
    rrc:OSRValueType "schema:price" ;
    #rrc:operator "" ;
    # same currency for all?
    rdfs:comment "Select the new offering instance if its price passes the check imposed by the operator." 
.
######

rrc:ComplexOSR
	rdfs:subClassOf rrc:OSR ;
	schema:name	schema:name ;
	rdfs:label	"ComplexOSR" ;
    schema:domainIncludes bigiot:Offering ;
    schema:rangeIncludes xsd:double ;
    rrc:rule rrc:rule ;
    rdfs:comment "ComplexOSR: OSR that defines its own rule to guide the selection of offerings." 
.

rrc:property
	rdf:type owl:ObjectProperty ;
    schema:domainIncludes rrc:ComplexOSR ;
    schema:rangeIncludes bigiot:Offering ;
.

# Complex OSRs ->

rrc:sameAs 
	rdfs:subClassOf rrc:ComplexOSR ;
	schema:name	"sameAs" ;
    rdfs:label "SameAs" ; # ComplexOSR
    rrc:rule "sameAs" ;	
    rrc:property rrc:property ;
    rrc:obj bigiot:Offering ;
    rdfs:comment "Select the new offering instance if it has same prop (e.g. location) as the offering 'obj'." 
.

rrc:locationSameAs
	rdfs:subClassOf rrc:ComplexOSR ;
	schema:name	"locationSameAs" ;
    rdfs:label "Location Same As" ;
    rrc:rule "sameAs" ;
    rrc:property "ssn:hasLocation" ;
#    rrc:obj bigiot:Offering ; or   schema:value bigiot:Offering ;
    rrc:OSRValueType "bigiot:Offering" ;
    rrc:OSRCategory "ComplexOSR" ;
    rdfs:comment "Select the new offering instance if it has same location as the offering 'obj'." 
.

# Overuse of Cardinality will make the recipe design complex, intended use is maxCardinality 'all' - e.g. switch s1 controls 'all' lights in room x
rrc:cardinality
	rdfs:subClassOf rrc:ComplexOSR ;
	schema:name	"cardinality" ;
   	rdfs:label "Cardinality" ;
    rrc:rule "cardinality" ;
#    rrc:minCardinality xsd:nonNegativeInteger ;
#    rrc:maxCardinality xsd:nonNegativeInteger ;
    rrc:OSRValueType "xsd:nonNegativeInteger" ;
    rrc:OSRCategory "ComplexOSR" ;
    rdfs:comment "Select the new offering instance if it fulfils the min, max Cardinality constraints" 
.

#rrc:combinedPrice
#	rdfs:subClassOf rrc:ComplexOSR ;
#	schema:name	"combinedPrice" ;
#   	rdfs:label "Combined Price" ;
#    rrc:rule "combinedPrice" ;
#    rrc:operator schema:Text ;
#    schema:value schema:value ;
#    rrc:OSRValueType "xsd:nonNegativeInteger" ;
#    rrc:OSRCategory "ComplexOSR" ;
#    rdfs:comment "Select the new offering instance if the combined price of all offerings in the RRC meets the specified condition." 
#.

####################################################################################################
# to be edited (not present in rdf_store.ttl) ->

#rrc:sameAs
#	rdf:type owl:ObjectProperty ;
# 	rdfs:domain bigiot:Offering ;
#  	rdfs:range bigiot:Offering ;
#.


#rrc:sameLocationAs a rrc:OSR ;
#    rdfs:label "SameLocationAs" ;
#    schema:domainIncludes bigiot:Offering ;
#    rrc:sameAs bigiot:Offering ;
#    rdfs:comment "Select the new offering instance if it is present at a particular location. (dyn conf)" 
#.

# schema:hasPlace
#rrc:selectIfHasSamePlace a rrc:OSR ;
#    rdfs:label "selectIfHasSamePlace" ;
#    schema:domainIncludes bigiot:Offering ;
#    rrc:sameAs bigiot:Offering ;
#    rdfs:comment "Select the new offering instance if it is present at a particular location. (dyn conf)" 
#.

# schema:spatialCoverage
#rrc:selectIfHasSameSpatialCoverage a rrc:OSR ;
#    rdfs:label "selectIfHasSameSpatialCoverage" ;
#    schema:domainIncludes bigiot:Offering ;
#    rrc:sameAs bigiot:Offering ;
#    rdfs:comment "Select the new offering instance if it is present at a particular location. (dyn conf)" 
#.

# Need to determine at runtime
#rrc:selectIfCheaper a rrc:OSR ;
#    rdfs:label "selectIfCheaper" ;
#    schema:domainIncludes bigiot:Offering ;
#    schema:rangeIncludes schema:Boolean ;
#    rdfs:comment "Select the new offering instance if it is less expensive than the current one. (dyn conf)" 
#.

# schema:NewCondition -- implicit?
#rrc:selectIfNew a rrc:OSR ;
#    rdfs:label "selectIfNew" ;
#    schema:domainIncludes bigiot:Offering ;
#    schema:rangeIncludes schema:Boolean ;
#    rdfs:comment "Just select the new offering. (dyn conf)" 
#.

# Other possible OSRs:
# bigiot:providerId